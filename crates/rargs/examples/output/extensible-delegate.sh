#!/usr/bin/env bash
# This script was generated by rargs 0.0.0 (https://rargs.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
set -e


parse_root() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --)
        shift
        rargs_other_args+=("$@")
        break
        ;;
      -?*)
        rargs_other_args+=("$1")
        shift
        ;;
      *)
        rargs_other_args+=("$1")
        shift
        ;;
    esac
  done
}

root() {

  # Parse command arguments
  parse_root "$@"

	echo "Here you would call the following command"
	# shellcheck disable=SC2068
	echo "  git" ${rargs_other_args[@]}
}


normalize_rargs_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        rargs_input+=("-${flags:i:1}")
      done
    else
      rargs_input+=("$arg")
    fi

    shift
  done
}

version() {
  echo -n "0.0.1"
}
usage() {
  printf "Extensible delegate command example using git\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  extensible [OPTIONS] [COMMAND] [COMMAND_OPTIONS] [...EXTERNAL_COMMAND]\n"
  printf "  extensible -h|--help\n"
  printf "  extensible -v|--version\n"
  printf "\n\033[4m%s\033[0m\n" "Examples:"
  printf "  extensible log [GIT_OPTIONS]\n"
  printf "    Delegate a command that will be called with all the arguments\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  EXTERNAL_COMMAND\n"
  printf "    External command to run\n"
  printf "\n\033[4m%s\033[0m\n" "Commands:"
  cat <<EOF
  download .... Download a file
  upload ...... Upload a file
EOF

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "  -v --version\n"
  printf "    Print version\n"
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -v|--version)
        version
        exit
        ;;
      -h|--help)
        usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done
  action="${1:-}"

  case $action in
    d|download)
      action="download"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    u|upload)
      action="upload"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    -h|--help)
      usage
      exit
      ;;
    "")
      action="root"
      ;;
    *)
      action="root"
      ;;
  esac
}
download_usage() {
  printf "Download a file\n"
  printf "\n\033[4m%s\033[0m %s\n" "Alias:" "d"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  download [OPTIONS] SOURCE ...[]\n"
  printf "  download -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  SOURCE\n"
  printf "    File to download\n"
  printf "    [@required]\n"
  printf "  EXTERNAL_COMMAND\n"
  printf "    External command to run\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_download_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        download_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --)
        shift
        rargs_other_args+=("$@")
        break
        ;;
      -?*)
        rargs_other_args+=("$1")
        shift
        ;;
      *)
        if [[ -z "$rargs_source" ]]; then
          rargs_source=$key
          shift
        else
          rargs_other_args+=("$1")
          shift
        fi
        ;;
    esac
  done
}
# Download a file
download() {
  local rargs_source

  # Parse command arguments
  parse_download_arguments "$@"

  
  if [[ -z "$rargs_source" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required option: " "source" >&2
    download_usage >&2
    exit 1
  fi
	echo "Download"
	echo "${rargs_input[*]}"
}
upload_usage() {
  printf "Upload a file\n"
  printf "\n\033[4m%s\033[0m %s\n" "Alias:" "u"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  upload [OPTIONS] SOURCE ...[]\n"
  printf "  upload -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  SOURCE\n"
  printf "    File to upload\n"
  printf "    [@required]\n"
  printf "  EXTERNAL_COMMAND\n"
  printf "    External command to run\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_upload_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        upload_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --)
        shift
        rargs_other_args+=("$@")
        break
        ;;
      -?*)
        rargs_other_args+=("$1")
        shift
        ;;
      *)
        if [[ -z "$rargs_source" ]]; then
          rargs_source=$key
          shift
        else
          rargs_other_args+=("$1")
          shift
        fi
        ;;
    esac
  done
}
# Upload a file
upload() {
  local rargs_source

  # Parse command arguments
  parse_upload_arguments "$@"

  
  if [[ -z "$rargs_source" ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required option: " "source" >&2
    upload_usage >&2
    exit 1
  fi
	echo "Upload"
	echo "${rargs_input[*]}"
}

rargs_run() {
  declare -a rargs_other_args=()
  declare -a rargs_input=()
  normalize_rargs_input "$@"
  parse_arguments "${rargs_input[@]}"
  # Call the right command action
  case "$action" in
    "download")
      download "${rargs_input[@]}"
      exit
      ;;
    "upload")
      upload "${rargs_input[@]}"
      exit
      ;;
    root)
      root "${rargs_input[@]}"
      exit
      ;;
    "")
      root "${rargs_input[@]}"
      ;;
    
  esac
}

rargs_run "$@"
