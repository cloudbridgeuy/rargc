#!/usr/bin/env bash
# This script was generated by rargs 0.0.0 (https://rargs.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
set -e


parse_root() {

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -a | --action)
        rargs_action+=("$2")
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ -z "$rargs_files" ]]; then
          rargs_files+=("$key")
          shift
        else
          rargs_files+=("$key")
          shift
        fi
        ;;
    esac
  done
}

root() {
  declare -a rargs_action
  declare -a rargs_repeatable_arg
  # Parse command arguments
  parse_root "$@"

  
  for value in "${rargs_action[@]}"; do
    if [[ ! "(upcase downcase)" =~ ${value} ]]; then
      printf "\e[31m%s\e[33m%s\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option for " "action" ": " "${value}" >&2
      usage >&2
      exit 1
    fi
  done
  
  if [[ "${#rargs_files[@]}" == 0 ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required option: " "files" >&2
    usage >&2
    exit 1
  fi
  echo
  echo "files:"
  for file in "${rargs_files[@]}"; do
    echo "  path: $file"
    for action in "${rargs_action[@]}"; do
      case "$action" in
        upcase)
          echo "    upcase ${file^^}"
          ;;
        downcase)
          echo "    downcase ${file,,}"
          ;;
      esac
    done
  done
  echo
  inspect_args
}


normalize_rargs_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      rargs_input+=("${BASH_REMATCH[1]}")
      rargs_input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        rargs_input+=("-${flags:i:1}")
      done
    else
      rargs_input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  prefix="rargs_"
  args="$(set | grep ^$prefix | grep -v rargs_run || true)"
  if [[ -n "$args" ]]; then
    echo
    echo args:
    for var in $args; do
      echo "- $var" | sed 's/=/ = /g'
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

  if ((${#rargs_other_args[@]})); then
    echo
    echo rargs_other_args:
    echo "- \${rargs_other_args[*]} = ${rargs_other_args[*]}"
    for i in "${!rargs_other_args[@]}"; do
      echo "- \${rargs_other_args[$i]} = ${rargs_other_args[$i]}"
    done
  fi
}

version() {
  echo "0.0.1"
}
usage() {
  printf "Sample application to demonstrate the use of repeatable arguments\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  repeatable-arg [OPTIONS] [COMMAND] [COMMAND_OPTIONS]\n"
  printf "  repeatable-arg -h|--help\n"
  printf "  repeatable-arg -v|--version\n"
  printf "\n\033[4m%s\033[0m\n" "Examples:"
  printf "  repeatable-arg README.md LICENSE\n"
  printf "    Multiple files\n"
  printf "  repeatable-arg *.md\n"
  printf "    Use a glob\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  FILES\n"
  printf "    One or more files to process\n"
  printf "    [@required, @multiple]\n"
  printf "\n\033[4m%s\033[0m\n" "Commands:"
  cat <<EOF
  formats .... Formats
EOF

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -a --action [<ACTION>]\n"
  printf "    Action to perform\n"
  printf "    [@multiple, @choices upcase, downcase]\n"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "  -v --version\n"
  printf "    Print version\n"
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -v|--version)
        version
        exit
        ;;
      -h|--help)
        usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done
  action="${1:-}"

  case $action in
    formats)
      action="formats"
      rargs_input=("${rargs_input[@]:1}")
      ;;
    -h|--help)
      usage
      exit
      ;;
    "")
      action="root"
      ;;
    *)
      action="root"
      ;;
  esac
}
formats_usage() {
  printf "Formats\n"

  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  formats [OPTIONS] FORMATS...\n"
  printf "  formats -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  FORMATS\n"
  printf "    One or more formats to process\n"
  printf "    [@required, @multiple, @default jpg, @choices jpg, png, gif]\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -a --action [<ACTION>]\n"
  printf "    Action to perform\n"
  printf "    [@multiple, @choices upcase, downcase]\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}
parse_formats_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h|--help)
        formats_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -a | --action)
        rargs_action+=("$2")
        shift 2
        ;;
      -?*)
        printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option: " "$key" >&2
        exit 1
        ;;
      *)
        if [[ -z "$rargs_formats" ]]; then
          rargs_formats+=("$key")
          shift
        else
          rargs_formats+=("$key")
          shift
        fi
        ;;
    esac
  done
}
# Formats
formats() {
  declare -a rargs_action
  declare -a rargs_formats
  # Parse command arguments
  parse_formats_arguments "$@"

  
    
  if [[ "${#rargs_formats[@]}" -eq 0 ]]; then
    rargs_formats=(jpg)
  fi
    
  
  if [[ -n "$rargs_action" ]]; then
    for value in "${rargs_action[@]}"; do
      if [[ ! "(upcase downcase)" =~ ${value} ]]; then
        printf "\e[31m%s\e[33m%s\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option for " "action" ": " "${value}" >&2
        formats_usage >&2
        exit 1
      fi
    done
  fi
  if [[ -n "$rargs_formats" ]]; then
    for value in "${rargs_formats[@]}"; do
      if [[ ! "(jpg png gif)" =~ ${value} ]]; then
        printf "\e[31m%s\e[33m%s\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Invalid option for " "formats" ": " "${value}" >&2
        formats_usage >&2
        exit 1
      fi
    done
  fi
  
  if [[ "${#rargs_formats[@]}" == 0 ]]; then
    printf "\e[31m%s\e[33m%s\e[31m\e[0m\n\n" "Missing required option: " "formats" >&2
    formats_usage >&2
    exit 1
  fi
  for format in "${rargs_formats[@]}"; do
    echo "format: $format"
    for action in "${rargs_action[@]}"; do
      case "$action" in
        upcase)
          echo "  upcase ${format^^}"
          ;;
        downcase)
          echo "  downcase ${format,,}"
          ;;
      esac
    done
  done
}

rargs_run() {
  declare -A deps=()
  declare -a rargs_input=()
  normalize_rargs_input "$@"
  parse_arguments "${rargs_input[@]}"
  # Call the right command action
  case "$action" in
    "formats")
      formats "${rargs_input[@]}"
      exit
      ;;
    root)
      root "${rargs_input[@]}"
      exit
      ;;
    "")
      root "${rargs_input[@]}"
      ;;
    
  esac
}

rargs_run "$@"
