{%- set_global required = [] -%}
{%- set_global uses_h = false %}
{%- set_global uses_v = false %}
{%- if options -%}
  {%- for key, option in options -%}
    {%- if option["short"] and option["short"] == "h" %}
      {%- set_global uses_h = true %}
    {%- endif %}
    {%- if option["short"] and option["short"] == "v" %}
      {%- set_global uses_v = true %}
    {%- endif %}
    {%- if option["required"] -%}
      {%- set_global required = required | concat(with=option) -%}
    {%- endif -%}
  {%- endfor -%}
{%- endif -%}
{%- if flags -%}
  {%- for key, flag in flags -%}
    {%- if flag["short"] and flag["short"] == "h" %}
      {%- set_global uses_h = true %}
    {%- endif %}
    {%- if flag["short"] and flag["short"] == "v" %}
      {%- set_global uses_v = true %}
    {%- endif %}
  {%- endfor -%}
{%- endif -%}


parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
    {%- if version %}
      {% if not uses_v %}-v|{% endif %}--version)
        version
        exit
        ;;
    {%- endif %}
    {%- if rules is not defined or rules is not containing("no-first-option-help") and rules is not containing("custom-usage") %}
      {% if not uses_h %}-h|{% endif %}--help)
        usage
        exit
        ;;
    {%- endif %}
      *)
        break
        ;;
    esac
  done

  {%-if commands %}
  action="${1:-}"

  case $action in
    {%- for key, command in commands %}
    {{ key }})
        action="{{ key }}"
        input=("${input[@]:1}")
        ;;
    {%- endfor %}
      {% if not uses_h %}-h|{% endif %}--help)
      usage
      exit
      ;;
    "")
      {%- if default and default != "" %}
      action="{{ default }}"
      {%- elif required | length > 0 %}
      usage >&2
      exit 1
      {% endif %}
      ;;
    *)
      {%- if default and default != "" %}
      action="{{ default }}"
      {% else %}
      printf "Invalid command: %s\n" "$action" >&2
      exit 1
      {% endif -%}
      ;;
  esac
  {%- else %}
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    {%- if flags %}{%- for key, flag in flags %}
      {% if flag["short"] -%}-{{ flag["short"] }} | {% endif -%}--{{ key }})
        args['--{{ key }}']=1
        shift
        ;;
    {%- endfor -%}{% endif %}
    {%- if options -%}{%- for key, option in options %}
      {% if option["short"] -%}-{{ option["short"] }} | {% endif -%}--{{ key }})
        {% if option["multiple"] -%}
          if [[ -z ${args['{{ key }}']+x} ]]; then
            args['{{ key }}']=$2
          else
            args['{{ key }}']="${args['{{ key }}']:-} $2"
          fi
        {% else -%}
          args['{{ key }}']=$2
        {% endif -%}
        shift 2
        ;;
    {%- endfor -%}{% endif %}
      {%- if rules and rules is containing("no-first-option-help") %}
      {% if not uses_h %}-h|{% endif %}--help)
        args['--help']=1
        shift 1
        ;;
      {% endif %}
      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;
      *)
        {%- if positional_arguments %}
          {%- for arg in positional_arguments %}
            {%- if loop.first and loop.last %}
        if [[ -z ${args['{{ arg["name"] }}']+x} ]]; then
          args['{{ arg["name"] }}']=$key
          shift
        else
              {%- if arg["multiple"] %}
          args['{{ arg["name"] }}']="${args['{{ arg["name"] }}']} \"$key\""
          shift
              {%- else %}
          printf "Invalid argument: %s\n" "$key" >&2
          exit 1
              {%- endif %}
        fi
            {%- elif loop.first %}
        if [[ -z ${args['{{ arg["name"] }}']+x} ]]; then
          args['{{ arg["name"] }}']=$key
          shift
            {%- elif loop.last %}
        elif [[ -z ${args['{{ arg["name"] }}']+x} ]]; then
          args['{{ arg["name"] }}']=$key
          shift
        else
              {%- if arg["multiple"] %}
          args['{{ arg["name"] }}']="${args['{{ arg["name"] }}']} \"$key\""
          shift
              {%- else %}
          printf "Invalid argument: %s\n" "$key" >&2
          exit 1
              {%- endif %}
        fi
            {%- else %}
        elif [[ -z ${args['{{ arg["name"] }}']+x} ]]; then
          args['{{ arg["name"] }}']=$key
          shift
            {%- endif %}
          {%- endfor %}
      {%- else %}
        printf "Invalid argument: %s\n" "$key" >&2
        exit 1
      {%- endif %}
        ;;
    esac
  done
  {%- endif %}
}
