#!/usr/bin/env bash

# This script was generated by rargc 0.0.0 (https://rargc.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi


version() {
  echo "1.0.0"
}

usage() {
  printf "Basic bash script example\n"
  printf "I'm not convinced about the usefulness of this script, but it's just an example\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  all -M|--options-with-multiple-and-required <OPTIONS-WITH-MULTIPLE-AND-REQUIRED> -z|--options-with-required <OPTIONS-WITH-REQUIRED> [OPTIONS] [COMMAND] [COMMAND_OPTIONS]\n"
  printf "  all -h|--help\n"
  printf "  all --version\n"
  printf "\n\033[4m%s\033[0m\n" "Commands:"
  cat <<EOF
  foo .... Greet the user
EOF
  printf "  [@default greet]\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -R --options-with-multiple [<OPTIONS-WITH-MULTIPLE>]\n"
  printf "    Option with values and multiple\n"
  printf "    [@multiple, @choices one, two, three]\n"
  printf "  -M --options-with-multiple-and-required <OPTIONS-WITH-MULTIPLE-AND-REQUIRED>\n"
  printf "    Option with values, required, and multiple\n"
  printf "    [@multiple, @choices one, two, three]\n"
  printf "  -z --options-with-required <OPTIONS-WITH-REQUIRED>\n"
  printf "    Option with values and required\n"
  printf "    [@choices one, two, three]\n"
  printf "  -v --verbose\n"
  printf "    Verbose mode\n"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "  --version\n"
  printf "    Pring version\n"
}


parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version)
        version
        exit
        ;;
      -h | --help)
        usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done
  action="${1:-}"

  case $action in
    foo)
      action="foo"
      input=("${input[@]:1}")
      ;;
    -h | --help)
      usage
      exit
      ;;
    "")
      action="greet"
      ;;
    *)
      action="greet"
      ;;
  esac
}


foo_usage() {
  printf "Greet the user\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  foo -M|--options-with-multiple-and-required <OPTIONS-WITH-MULTIPLE-AND-REQUIRED> -z|--options-with-required <OPTIONS-WITH-REQUIRED> -p|--multiple-and-required <MULTIPLE-AND-REQUIRED> -r|--required <REQUIRED> [OPTIONS] DEFAULT REQUIRED MULTIPLE... \n"
  printf "  foo -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Arguments:"
  printf "  DEFAULT\n"
  printf "    Default value positional argument\n"
  printf "    [@required, @default Default value]\n"
  printf "  REQUIRED\n"
  printf "    Required positional argument\n"
  printf "    [@required]\n"
  printf "  MULTIPLE\n"
  printf "    Multiple positional argument\n"
  printf "    [@required, @multiple]\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -d --default [<DEFAULT>]\n"
  printf "    Default value option\n"
  printf "    [@default Default value]\n"
  printf "  -m --multiple [<MULTIPLE>]\n"
  printf "    Multiple option\n"
  printf "    [@multiple]\n"
  printf "  -p --multiple-and-required <MULTIPLE-AND-REQUIRED>\n"
  printf "    Multiple and required option\n"
  printf "    [@multiple]\n"
  printf "  -V --option-with-value-notation [<OPTION-WITH-VALUE-NOTATION>]\n"
  printf "    Option with value notation\n"
  printf "  -o --options [<OPTIONS>]\n"
  printf "    Option with values\n"
  printf "    [@choices one, two, three]\n"
  printf "  -O --options-with-default [<OPTIONS-WITH-DEFAULT>]\n"
  printf "    Option with values and default\n"
  printf "    [@default one, @choices one, two, three]\n"
  printf "  -r --required <REQUIRED>\n"
  printf "    Required option\n"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "\n\033[4m%s\033[0m\n" "Global Options:"
  printf "  -R --options-with-multiple [<OPTIONS-WITH-MULTIPLE>]\n"
  printf "    Option with values and multiple\n"
  printf "    [@multiple, @choices one, two, three]\n"
  printf "  -M --options-with-multiple-and-required <OPTIONS-WITH-MULTIPLE-AND-REQUIRED>\n"
  printf "    Option with values, required, and multiple\n"
  printf "    [@multiple, @choices one, two, three]\n"
  printf "  -z --options-with-required <OPTIONS-WITH-REQUIRED>\n"
  printf "    Option with values and required\n"
  printf "    [@choices one, two, three]\n"
  printf "  -v --verbose\n"
  printf "    Verbose mode\n"
}

parse_foo_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h | --help)
        foo_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -d | --default)
        args['default']=$2
        shift 2
        ;;
      -m | --multiple)
        if [[ -z ${args['multiple']+x} ]]; then
            args['multiple']=$2
          else
            args['multiple']="${args['multiple']:-} $2"
          fi
        shift 2
        ;;
      -p | --multiple-and-required)
        if [[ -z ${args['multiple-and-required']+x} ]]; then
            args['multiple-and-required']=$2
          else
            args['multiple-and-required']="${args['multiple-and-required']:-} $2"
          fi
        shift 2
        ;;
      -V | --option-with-value-notation)
        args['option-with-value-notation']=$2
        shift 2
        ;;
      -o | --options)
        args['options']=$2
        shift 2
        ;;
      -O | --options-with-default)
        args['options-with-default']=$2
        shift 2
        ;;
      -r | --required)
        args['required']=$2
        shift 2
        ;;
      -v | --verbose)
        args['--verbose']=1
        shift
        ;;
      -R | --options-with-multiple)
        args['options-with-multiple']=$2
        shift 2
        ;;
      -M | --options-with-multiple-and-required)
        args['options-with-multiple-and-required']=$2
        shift 2
        ;;
      -z | --options-with-required)
        args['options-with-required']=$2
        shift 2
        ;;
      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;
      *)
        printf "Invalid argument: %s\n" "$key" >&2
        exit 1
        ;;
    esac
  done
}

# Greet the user
foo() {

  
  if [[ -z "${args['default']}" ]]; then
    args['default']="Default value"
  fi

  if [[ -z "${args['options-with-default']}" ]]; then
    args['options-with-default']="one"
  fi

  if [[ -z "${args['default']}" ]]; then
    args['default']="Default value"
  fi

  
  if [[ -n "${args['options']}" ]]; then
    if [[ ! "(one two three)" =~ ${args['options']} ]]; then
      echo "Invalid option for options: ${args['options']}"
      foo_usage
      exit 1
    fi
  fi

  if [[ -n "${args['options-with-default']}" ]]; then
    if [[ ! "(one two three)" =~ ${args['options-with-default']} ]]; then
      echo "Invalid option for options-with-default: ${args['options-with-default']}"
      foo_usage
      exit 1
    fi
  fi

  if [[ -n "${args['options-with-multiple']}" ]]; then
    if [[ ! "(one two three)" =~ ${args['options-with-multiple']} ]]; then
      echo "Invalid option for options-with-multiple: ${args['options-with-multiple']}"
      foo_usage
      exit 1
    fi
  fi

  if [[ -n "${args['options-with-multiple-and-required']}" ]]; then
    if [[ ! "(one two three)" =~ ${args['options-with-multiple-and-required']} ]]; then
      echo "Invalid option for options-with-multiple-and-required: ${args['options-with-multiple-and-required']}"
      foo_usage
      exit 1
    fi
  fi

  if [[ -n "${args['options-with-required']}" ]]; then
    if [[ ! "(one two three)" =~ ${args['options-with-required']} ]]; then
      echo "Invalid option for options-with-required: ${args['options-with-required']}"
      foo_usage
      exit 1
    fi
  fi

  
  if [[ -z "${args['multiple-and-required']}" ]]; then
    echo "Missing required option: multiple-and-required"
    foo_usage
    exit 1
  fi

  if [[ -z "${args['options-with-multiple-and-required']}" ]]; then
    echo "Missing required option: options-with-multiple-and-required"
    foo_usage
    exit 1
  fi

  if [[ -z "${args['options-with-required']}" ]]; then
    echo "Missing required option: options-with-required"
    foo_usage
    exit 1
  fi

  if [[ -z "${args['required']}" ]]; then
    echo "Missing required option: required"
    foo_usage
    exit 1
  fi

  if [[ -z "${args['default']}" ]]; then
    echo "Missing required option: default"
    foo_usage
    exit 1
  fi

  if [[ -z "${args['required']}" ]]; then
    echo "Missing required option: required"
    foo_usage
    exit 1
  fi

  if [[ -z "${args['multiple']}" ]]; then
    echo "Missing required option: multiple"
    foo_usage
    exit 1
  fi

    echo "${args[@]}"
    echo "${args[@]}"
}

normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi
}



initialize() {
  if [[ -n "${DEBUG:-}" ]]; then
    set -x
  fi

  set -e
}


run() {
  declare -A args=()
  declare -a input=()
  normalize_input "$@"
  parse_arguments "${input[@]}"
  # Call the right command action
  case "$action" in
    "foo")
      parse_foo_arguments "${input[@]}"
      shift $#
      foo
      ;;
  esac
}


initialize
run "$@"
