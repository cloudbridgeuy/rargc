#!/usr/bin/env bash

# This script was generated by rargc 0.0.0 (https://rargc.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi


version() {
  echo "0.1.0"
}

usage() {
  printf "Commands with arguments example\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  args [OPTIONS] [COMMAND] [COMMAND_OPTIONS]\n"

  printf "  args -h|--help\n"
  printf "  args --version\n"
  printf "\n\033[4m%s\033[0m\n" "Commands:"
  cat <<EOF
  choice_default .......... Choice + Default
  choice_default_value .... Choice + Default + Value Notation
  choices ................. Choices
  default ................. Default
  required ................ Required
  simplest ................ Simplest
  value ................... Value Notation
EOF
  printf "  [@default simplest]\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "  --version\n"
  printf "    Pring version\n"
}


parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version)
        version
        exit
        ;;
      -h | --help)
        usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done
  action="${1:-}"

  case $action in
    choice_default)
      action="choice_default"
      input=("${input[@]:1}")
      ;;
    choice_default_value)
      action="choice_default_value"
      input=("${input[@]:1}")
      ;;
    choices)
      action="choices"
      input=("${input[@]:1}")
      ;;
    default)
      action="default"
      input=("${input[@]:1}")
      ;;
    required)
      action="required"
      input=("${input[@]:1}")
      ;;
    simplest)
      action="simplest"
      input=("${input[@]:1}")
      ;;
    value)
      action="value"
      input=("${input[@]:1}")
      ;;
    -h | --help)
      usage
      exit
      ;;
    "")
      action="simplest"
      ;;
    *)
      action="simplest"
      ;;
  esac
}


choice_default_usage() {
  printf "Choice + Default\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  choice_default [OPTIONS] [CHOICE_DEFAULT] \n"
  printf "  choice_default -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}

parse_choice_default_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h | --help)
        choice_default_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;
      *)
        printf "Invalid argument: %s\n" "$key" >&2
        exit 1
        ;;
    esac
  done
}

# Choice + Default
choice_default() {

  
  if [[ -z "${args['choice_default']}" ]]; then
    args['choice_default']="a"
  fi

    :;
}

choice_default_value_usage() {
  printf "Choice + Default + Value Notation\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  choice_default_value [OPTIONS] [VALUE_NOTATION] \n"
  printf "  choice_default_value -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}

parse_choice_default_value_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h | --help)
        choice_default_value_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;
      *)
        printf "Invalid argument: %s\n" "$key" >&2
        exit 1
        ;;
    esac
  done
}

# Choice + Default + Value Notation
choice_default_value() {

  
  if [[ -z "${args['choice_default_value']}" ]]; then
    args['choice_default_value']="a"
  fi

    :;
}

choices_usage() {
  printf "Choices\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  choices [OPTIONS] [CHOICES] \n"
  printf "  choices -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}

parse_choices_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h | --help)
        choices_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;
      *)
        printf "Invalid argument: %s\n" "$key" >&2
        exit 1
        ;;
    esac
  done
}

# Choices
choices() {

    :;
}

default_usage() {
  printf "Default\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  default [OPTIONS] [DEFAULT] \n"
  printf "  default -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}

parse_default_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h | --help)
        default_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;
      *)
        printf "Invalid argument: %s\n" "$key" >&2
        exit 1
        ;;
    esac
  done
}

# Default
default() {

  
  if [[ -z "${args['default']}" ]]; then
    args['default']="default_value"
  fi

    :;
}

required_usage() {
  printf "Required\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  required [OPTIONS] REQUIRED \n"
  printf "  required -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}

parse_required_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h | --help)
        required_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;
      *)
        printf "Invalid argument: %s\n" "$key" >&2
        exit 1
        ;;
    esac
  done
}

# Required
required() {

  
  if [[ -z "${args['required']}" ]]; then
    echo "Missing required option: required"
    required_usage
    exit 1
  fi

    :;
}

simplest_usage() {
  printf "Simplest\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  simplest [OPTIONS] [SIMPLEST] \n"
  printf "  simplest -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}

parse_simplest_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h | --help)
        simplest_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;
      *)
        printf "Invalid argument: %s\n" "$key" >&2
        exit 1
        ;;
    esac
  done
}

# Simplest
simplest() {

    :;
}

value_usage() {
  printf "Value Notation\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  value [OPTIONS] [VALUE_NOTATION] \n"
  printf "  value -h|--help\n"

  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -h --help\n"
  printf "    Print help\n"
}

parse_value_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h | --help)
        value_usage
        exit
        ;;
      *)
        break
        ;;
    esac
  done

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;
      *)
        printf "Invalid argument: %s\n" "$key" >&2
        exit 1
        ;;
    esac
  done
}

# Value Notation
value() {

    :;
}

normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi
}



initialize() {
  if [[ -n "${DEBUG:-}" ]]; then
    set -x
  fi

  set -e
}


run() {
  declare -A args=()
  declare -a input=()
  normalize_input "$@"
  parse_arguments "${input[@]}"
  # Call the right command action
  case "$action" in
    "choice_default")
      parse_choice_default_arguments "${input[@]}"
      shift $#
      choice_default
      ;;
  
    "choice_default_value")
      parse_choice_default_value_arguments "${input[@]}"
      shift $#
      choice_default_value
      ;;
  
    "choices")
      parse_choices_arguments "${input[@]}"
      shift $#
      choices
      ;;
  
    "default")
      parse_default_arguments "${input[@]}"
      shift $#
      default
      ;;
  
    "required")
      parse_required_arguments "${input[@]}"
      shift $#
      required
      ;;
  
    "simplest")
      parse_simplest_arguments "${input[@]}"
      shift $#
      simplest
      ;;
  
    "value")
      parse_value_arguments "${input[@]}"
      shift $#
      value
      ;;
  esac
}


initialize
run "$@"
