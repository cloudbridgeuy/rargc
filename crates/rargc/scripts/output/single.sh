#!/usr/bin/env bash

# This script was generated by rargc 0.0.0 (https://rargc.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "Bash version 4 or higher is required\n" >&2
  exit 1
fi


version() {
  echo "1.0.0"
}


usage() {
  printf "Script without subcommands.\n\n"
  printf "Usage:\n"
  printf "  single [OPTIONS]\n"
  printf "  single --help | -h\n"
  printf "  single --version | -v\n"
  printf "\nFlags:\n"
  printf "  -f --flag\n"
  printf "    Verbose mode\n"
  printf "\nOptions:\n"
  printf "  -o --option\n"
  printf "    Option with any value\n"
  
}


parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -v | --version)
        version
        exit
        ;;
      -h | --help)
        usage
        exit
        ;;

      *)
        break
        ;;
    esac
  done


  action=${1:-}

  case $action in
    -*) ;;

    "")
      usage >&2
      exit 1
      ;;

    *)
      printf "Invalid command: %s\n" "$action" >&2
      exit 1
      ;;
  esac


  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -f | --flag)
        args['--flag']=1
        shift
        ;;
      --option)
        args['option']=$2
        shift 2
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        printf "Invalid argument: %s\n" "$key" >&2
        exit 1
        ;;
    esac
  done


}


normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi
}



initialize() {
  if [[ -n "${DEBUG:-}" ]]; then
    set -x
  fi

  set -e
}


run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_arguments "${input[@]}"
}


initialize
run "$@"
