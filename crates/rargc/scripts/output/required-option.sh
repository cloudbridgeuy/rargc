#!/usr/bin/env bash

# This script was generated by rargc 0.0.0 (https://rargc.cloudbridge.uy)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi


version() {
  echo "0.1.0"
}


usage() {
  printf "Commands example with a required global option\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  required-option -e|--editor <EDITOR> [OPTIONS] [COMMAND] [COMMAND_OPTIONS]\n"
  printf "  required-option -h|--help\n"
  printf "  required-option --version\n"
  printf "\n\033[4m%s\033[0m\n" "Commands:"
  printf "  download\tDownload a file\n"
  printf "  upload\tUpload a file\n"
  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -e --editor <EDITOR>\n"
  printf "    Editor to use\n"
  printf "\n\033[4m%s\033[0m\n" "Flags:"
  printf "  -h --help\n"
  printf "    Print help\n"
  printf "  --version\n"
  printf "    Pring version\n"
}


parse_arguments() {
    while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version)
        version
        exit
        ;;
      -h | --help)
        usage
        exit
        ;;

      *)
        break
        ;;
    esac
  done

  
  action="${1:-}"

  case $action in

    download)
      action="download"
      input=("${input[@]:1}")
      ;;
    upload)
      action="upload"
      input=("${input[@]:1}")
      ;;
    -h | --help)
      usage
      exit
      ;;
    "")
      usage >&2
      exit 1
      
      ;;
    *)
      printf "Invalid command: %s\n" "$action" >&2
      exit 1
      ;;
  esac

}

download_usage() {
  printf "Download a file\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  download [OPTIONS]\n"
  printf "  download -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Flags:"
  printf "  -f --force\n"
  printf "    Overwrite existing files\n"
  printf "  -h --help\n"
  printf "    Print help\n"
}

parse_download_arguments() {
    while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h | --help)
        download_usage
        exit
        ;;

      *)
        break
        ;;
    esac
  done

  action="download"
  

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -f | --force)
        args['--force']=1
        shift
        ;;
      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        printf "Invalid argument: %s\n" "$key" >&2
        exit 1
        ;;
    esac
  done

}

# Download a file
download() {
    # shellcheck disable=SC2154
    echo "Downloading ${args["source"]} to ${args["target"]}"
    inspect_args
}

upload_usage() {
  printf "Upload a file\n"
  printf "\n\033[4m%s\033[0m\n" "Usage:"
  printf "  upload -e|--editor <EDITOR> -u|--user <USER> [OPTIONS]\n"
  printf "  upload -h|--help\n"
  printf "\n\033[4m%s\033[0m\n" "Options:"
  printf "  -e --editor <EDITOR>\n"
  printf "    Editor to use\n"
  printf "  -p --password [<PASSWORD>]\n"
  printf "    Password to use for logging in\n"
  printf "  -u --user <USER>\n"
  printf "    Username to use for logging in\n"
  printf "\n\033[4m%s\033[0m\n" "Flags:"
  printf "  -h --help\n"
  printf "    Print help\n"
}

parse_upload_arguments() {
    while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      -h | --help)
        upload_usage
        exit
        ;;

      *)
        break
        ;;
    esac
  done

  action="upload"
  

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -e | --editor)
        args['editor']=$2
        shift 2
        ;;

      -p | --password)
        args['password']=$2
        shift 2
        ;;

      -u | --user)
        args['user']=$2
        shift 2
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        printf "Invalid argument: %s\n" "$key" >&2
        exit 1
        ;;
    esac
  done

}

# Upload a file
upload() {
    # shellcheck disable=SC2154
    echo "Uploading using ${args["user"]}:${args["password"]}"
    inspect_args
}

normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi
}



initialize() {
  if [[ -n "${DEBUG:-}" ]]; then
    set -x
  fi

  set -e
}


run() {
  declare -A args=()
  declare -a input=()
  normalize_input "$@"
  parse_arguments "${input[@]}"
  # Global script code
  echo "Hello from the other side!!!"
  echo "Your editor of choice is ${EDITOR:-}"
  # Call the right command action
  case "$action" in
    "download")
      parse_download_arguments "${input[@]}"
      shift $#
      download
      ;;
  
    "upload")
      parse_upload_arguments "${input[@]}"
      shift $#
      upload
      ;;
  esac
}


initialize
run "$@"
